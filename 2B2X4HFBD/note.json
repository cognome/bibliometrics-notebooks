{
  "paragraphs": [
    {
      "text": "val OptSaveMode: Option[org.apache.spark.sql.SaveMode] \u003d Some(org.apache.spark.sql.SaveMode.Overwrite)\nval DatasetId \u003d 1\nval StudyName \u003d \"anticipation\"\n\nval WorkDir \u003d s\"/tmp/$StudyName\"\nval RawDir \u003d s\"$WorkDir/raw\"\nval ProcessingDir \u003d s\"$WorkDir/processing\"",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1425548774291_925993399",
      "id": "20150305-094614_1936011931",
      "dateCreated": "Mar 5, 2015 9:46:14 AM",
      "dateStarted": "Mar 4, 2016 10:09:42 AM",
      "dateFinished": "Mar 4, 2016 10:09:43 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Definitions",
      "text": "object Wos {\n    \n    case class Affiliation(addressLine: Option[String], enhancedNames: Option[Seq[String]])\n}",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456842644936_1289014616",
      "id": "20160301-153044_114662465",
      "dateCreated": "Mar 1, 2016 3:30:44 PM",
      "dateStarted": "Mar 4, 2016 10:09:42 AM",
      "dateFinished": "Mar 4, 2016 10:09:43 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Loading",
      "text": "val rawPublications \u003d sqlc.read.parquet(s\"$RawDir/publications.parquet\").persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)\nrawPublications.registerTempTable(\"raw_publications\")\n    \nval citationEdges \u003d sqlc.read.parquet(s\"$RawDir/citation_edges.parquet\").persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "tableHide": true,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1429536714908_126304435",
      "id": "20150420-133154_24086732",
      "dateCreated": "Apr 20, 2015 1:31:54 PM",
      "dateStarted": "Mar 4, 2016 10:09:43 AM",
      "dateFinished": "Mar 4, 2016 10:09:44 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Processing: Publications",
      "text": "val ConferenceTypes \u003d Set(\n    \"conference paper\",\n    \"meeting abstract\",\n    \"proceedings paper\")\n\nval extractList \u003d sqlc.udf.register(\"extract_list\", (field: String) \u003d\u003e Option(field).map(_.split(\u0027;\u0027).map(_.trim).toSeq.distinct))\nval flagConferences \u003d sqlc.udf.register(\"flag_conferences\", (docTypes: Seq[String]) \u003d\u003e Option(docTypes).map(!_.map(_.toLowerCase).toSet.intersect(ConferenceTypes).isEmpty))\n\nsqlc.udf.register(\"extract_count\", { field: String \u003d\u003e\n    Option(field).flatMap(\"\"\"\\d+(?:,\\d+)?\"\"\".r.findFirstIn(_)).map(_.replaceAll(\",\", \"\").toInt)\n})\nsqlc.udf.register(\"extract_year\", { field: String \u003d\u003e\n    Option(field).flatMap(\"\"\"\\d{4}\"\"\".r.findFirstIn(_)).map(_.toShort)\n})\n\nval publications \u003d rawPublications.selectExpr(\n    \"did\",\n    \"pub_id\",\n    \"is_main\",\n    \"is_backward\",\n    \"is_forward\",\n    \"title\",\n    \"alternate_titles\",\n    \"extract_year(date) AS year\",\n    \"abstract\",\n    \"extract_count(times_cited_field) AS times_cited\",\n    \"extract_count(references_count_field) AS references_count\",\n    \"extract_list(document_types_field) AS document_types\",\n    \"extract_list(author_keywords_field) AS author_keywords\",\n    \"extract_list(keywords_plus_field) AS keywords_plus\",\n    \"extract_list(controlled_indexing_field) AS controlled_indexing\",\n    \"extract_list(uncontrolled_indexing_field) AS uncontrolled_indexing\",\n    \"extract_list(research_areas_field) AS research_areas\",\n    \"extract_list(wos_categories_field) AS wos_categories\",\n    \"extract_list(scielo_categories_field) AS scielo_categories\",\n    \"extract_list(scielo_collections_field) AS scielo_collections\",\n    \"author_address\",\n    \"wos_database\",\n    \"(is_main\u003dfalse OR title IS NOT NULL) AS is_valid\"\n).withColumn(\"is_conference\", flagConferences(\u0027document_types)).persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)\npublications.registerTempTable(\"publications\")\n\npublications.show()",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "tableHide": true,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428502185370_1118322699",
      "id": "20150408-140945_355752063",
      "dateCreated": "Apr 8, 2015 2:09:45 PM",
      "dateStarted": "Mar 4, 2016 10:09:43 AM",
      "dateFinished": "Mar 4, 2016 10:09:45 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Publications validation",
      "text": "%sql SELECT if(is_valid, \"valid\", \"invalid\"), count(*) FROM publications GROUP BY is_valid",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "tableHide": true,
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "_c0",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "yAxis": {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428583632693_-636610607",
      "id": "20150409-124712_1609049685",
      "dateCreated": "Apr 9, 2015 12:47:12 PM",
      "dateStarted": "Mar 4, 2016 10:09:44 AM",
      "dateFinished": "Mar 4, 2016 10:09:47 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "OptSaveMode.foreach(publications.write.mode(_).parquet(s\"$ProcessingDir/publications.parquet\"))",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1442478818172_-716843450",
      "id": "20150917-083338_388408565",
      "dateCreated": "Sep 17, 2015 8:33:38 AM",
      "dateStarted": "Mar 4, 2016 10:09:45 AM",
      "dateFinished": "Mar 4, 2016 10:09:48 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "References overview",
      "text": "val forwardRefsStats \u003d citationEdges.filter(array_contains(\u0027attr.getField(\"_2\"), \"forward\")).groupBy(\u0027dstId).agg(count(\u0027*) as \"forward_ref_count\")\nforwardRefsStats.registerTempTable(\"forward_refs_stats\")\nval forwardRefsOverview \u003d publications.join(\n    forwardRefsStats, \u0027pub_id \u003d\u003d\u003d \u0027dstId\n).select(\n    \u0027did, \u0027pub_id, \u0027title, \u0027year, \u0027is_main,\n    \u0027times_cited, \u0027forward_ref_count, (\u0027times_cited - \u0027forward_ref_count) as \"missing_forward_ref_count\"\n)\nforwardRefsOverview.registerTempTable(\"forward_refs_overview\")\nforwardRefsOverview.describe(\"forward_ref_count\", \"missing_forward_ref_count\").show()\n\nval backwardRefsStats \u003d citationEdges.filter(array_contains(\u0027attr.getField(\"_2\"), \"backward\")).groupBy(\u0027srcId).agg(count(\u0027*) as \"backward_ref_count\")\nbackwardRefsStats.registerTempTable(\"backward_refs_stats\")\nval backwardRefsOverview \u003d publications.join(\n    backwardRefsStats, \u0027pub_id \u003d\u003d\u003d \u0027srcId\n).select(\n    \u0027did, \u0027pub_id, \u0027title, \u0027year,\n    \u0027references_count, \u0027backward_ref_count, (\u0027references_count - \u0027backward_ref_count) as \"missing_backward_ref_count\"\n)\nbackwardRefsOverview.registerTempTable(\"backward_refs_overview\")\nbackwardRefsOverview.describe(\"backward_ref_count\", \"missing_backward_ref_count\").show()",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435736284361_-181643753",
      "id": "20150701-073804_1316110248",
      "dateCreated": "Jul 1, 2015 7:38:04 AM",
      "dateStarted": "Mar 4, 2016 10:09:48 AM",
      "dateFinished": "Mar 4, 2016 10:09:53 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nSELECT pub_id, title, references_count, backward_ref_count, missing_backward_ref_count\nFROM backward_refs_overview\nWHERE missing_backward_ref_count !\u003d 0 AND missing_backward_ref_count IS NOT NULL\nORDER BY missing_backward_ref_count DESC",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "pub_id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435737475161_-518738509",
      "id": "20150701-075755_401220735",
      "dateCreated": "Jul 1, 2015 7:57:55 AM",
      "dateStarted": "Mar 4, 2016 10:09:48 AM",
      "dateFinished": "Mar 4, 2016 10:09:54 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nSELECT pub_id, title, times_cited, forward_ref_count, missing_forward_ref_count\nFROM forward_refs_overview\nWHERE missing_forward_ref_count !\u003d 0 AND missing_forward_ref_count IS NOT NULL\nORDER BY missing_forward_ref_count DESC",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "pub_id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1436786969072_1654801914",
      "id": "20150713-112929_421078285",
      "dateCreated": "Jul 13, 2015 11:29:29 AM",
      "dateStarted": "Mar 4, 2016 10:09:53 AM",
      "dateFinished": "Mar 4, 2016 10:09:56 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Processing: Journals",
      "text": "val journals \u003d rawPublications.withColumnRenamed(\"journal\", \"name\").select(\n    \u0027did, \u0027pub_id, \u0027name, \u0027volume, \u0027issue, \u0027pages, \u0027supplement, \u0027date\n).withColumn(\"is_valid\", \u0027name.isNotNull).persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)\njournals.registerTempTable(\"journals\")\njournals.show()",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428503359522_1537588965",
      "id": "20150408-142919_1054775303",
      "dateCreated": "Apr 8, 2015 2:29:19 PM",
      "dateStarted": "Mar 4, 2016 10:09:54 AM",
      "dateFinished": "Mar 4, 2016 10:09:56 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Journal validation",
      "text": "%sql SELECT if(is_valid, \"valid\", \"invalid\"), count(*) FROM journals GROUP BY is_valid",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "_c0",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "_c0",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428569908787_1346345150",
      "id": "20150409-085828_553775158",
      "dateCreated": "Apr 9, 2015 8:58:28 AM",
      "dateStarted": "Mar 4, 2016 10:09:56 AM",
      "dateFinished": "Mar 4, 2016 10:09:57 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "OptSaveMode.foreach(journals.write.mode(_).parquet(s\"$ProcessingDir/journals.parquet\"))",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1442478911956_-299836939",
      "id": "20150917-083511_1204553952",
      "dateCreated": "Sep 17, 2015 8:35:11 AM",
      "dateStarted": "Mar 4, 2016 10:09:56 AM",
      "dateFinished": "Mar 4, 2016 10:09:58 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Processing: Authors",
      "text": "object AuthorProcessingHelper {\n    \n    val ShortNamingRegex \u003d \"\"\"^[^(\\[]+\"\"\".r\n    val ExpandedNamingRegex \u003d \"\"\"\\((.+?)(?:[\\(\\\"](.+?)[\\)\\\"](.*?))?\\)\"\"\".r\n    val MaidenNameRegex \u003d \"\"\"(?:[nN]ee|[bB]orn) +(.+)\"\"\".r\n    val AffiliationRegex \u003d \"\"\"\\[ ((\\d|,)+) \\]\"\"\".r\n    \n    val InitialRegex \u003d \"\"\"^([A-Z])\\.?$\"\"\".r\n    val InitialsRegex \u003d \"\"\"^([A-Z])+$\"\"\".r\n    val DottedInitialsRegex \u003d \"\"\"^((?:[A-Z]\\.)(?:-?[A-Z]\\.)*)$\"\"\".r\n    \n    private val ComposedNameRegex \u003d \"(-.+)\".r\n    private val TrailingDotRegex \u003d \"\"\"^(.*[a-zA-Z]{2})\\.$\"\"\".r\n    \n    def parseFullName(str: String): Option[(String, Seq[String], Option[String])] \u003d {\n        val chunks \u003d str.split(\",\").map(_.trim).toSeq\n        chunks.size match {\n            case 1 \u003d\u003e\n                val names \u003d parseNameList(chunks(0))\n                Some((names.last, names.dropRight(1), None))\n            case 2 | 3 \u003d\u003e Some((chunks(0), parseNameList(chunks(1)), chunks.lift(2)))\n            case _ \u003d\u003e\n                // Unexpected author full name format\n                None\n        }\n    }\n    \n    def cleanName(name: String): String \u003d {\n        TrailingDotRegex.findFirstMatchIn(name).map(_.group(1)).getOrElse(name)\n    }\n    \n    private def parseNameList(str: String): Seq[String] \u003d {\n        str.split(\" \").foldRight(Seq.empty[String]) {\n            case (name, Seq(ComposedNameRegex(part), tail @ _*)) \u003d\u003e (name + part) +: tail\n            case (name, list)                                    \u003d\u003e name +: list\n        }\n    }\n}\n\nval isAnonymous \u003d sqlc.udf.register(\"is_anonymous\", (str: String) \u003d\u003e str.startsWith(\"[Anonymous]\"))\n\nval extractShortNaming \u003d udf { str: String \u003d\u003e\n    AuthorProcessingHelper.ShortNamingRegex.findFirstIn(str).flatMap(AuthorProcessingHelper.parseFullName)\n}\nval extractExpandedNaming \u003d udf { str: String \u003d\u003e\n    AuthorProcessingHelper.ExpandedNamingRegex.findFirstMatchIn(str).map { m \u003d\u003e\n        val fullName \u003d Option(m.group(3)).map(s \u003d\u003e s\"${m.group(1).trim} ${s.trim}\").getOrElse(m.group(1).trim)\n        val nickname \u003d Option(m.group(2)).map(_.trim)\n        val maidenName \u003d nickname.flatMap { str \u003d\u003e\n            AuthorProcessingHelper.MaidenNameRegex.findFirstMatchIn(str)\n        }.flatMap(m \u003d\u003e Option(m.group(1))).map(_.trim)\n        (fullName, if (maidenName.isEmpty) nickname else None, maidenName)\n    }\n}\nval extractNames \u003d udf { expandedNaming: org.apache.spark.sql.Row \u003d\u003e\n    Option(expandedNaming).flatMap(r \u003d\u003e AuthorProcessingHelper.parseFullName(r.getString(0)))\n}\nval extractGivenNames \u003d udf { (extractedNames: org.apache.spark.sql.Row, shortNaming: org.apache.spark.sql.Row) \u003d\u003e\n    (Option(extractedNames) orElse Option(shortNaming)).map { r \u003d\u003e\n        r.getAs[Seq[String]](1).map(AuthorProcessingHelper.cleanName).flatMap {\n            // Separate names/initials\n            case AuthorProcessingHelper.InitialsRegex(initals) \u003d\u003e initals.map(_.toString)\n            case AuthorProcessingHelper.DottedInitialsRegex(initals) \u003d\u003e initals.split(\u0027.\u0027).foldLeft(Seq.empty[String]) { (l, a) \u003d\u003e if (a.startsWith(\"-\")) l.init :+ (l.last + a) else l :+ a }\n            case name: String \u003d\u003e Seq(name)\n        }.map(_.split(\"-\").flatMap {\n            case AuthorProcessingHelper.InitialRegex(inital) \u003d\u003e inital.map(_.toString)\n            case name \u003d\u003e Seq(name)\n        })\n    }\n}\nval extractSuffix \u003d udf { (extractedNames: org.apache.spark.sql.Row, shortNaming: org.apache.spark.sql.Row) \u003d\u003e\n    (Option(extractedNames) orElse Option(shortNaming)).flatMap { r \u003d\u003e\n        Option(r.getString(2))\n    }\n}\n\nval extractAffiliations \u003d udf { str: String \u003d\u003e\n    AuthorProcessingHelper.AffiliationRegex.findFirstMatchIn(str)\n        .flatMap(m \u003d\u003e Option(m.group(1)))\n        .map(_.split(\u0027,\u0027).map(_.trim.toShort).toSeq.distinct)\n}\n\nval processSuffix \u003d udf { (shortNaming: org.apache.spark.sql.Row, potentialSuffix: String, givenNames: Seq[Seq[String]]) \u003d\u003e\n    val optPotentialSuffix \u003d Option(potentialSuffix)\n    val optGivenNames \u003d Option(givenNames)\n    \n    val initials \u003d optGivenNames.map(_.map(_.head.head.toString).mkString(\"\")).getOrElse(\"\")\n    val initialsFromShortNaming \u003d Option(shortNaming).flatMap(_.getAs[Seq[String]](1).headOption)\n    \n    if (optPotentialSuffix.isDefined \u0026\u0026 optPotentialSuffix.map(initials + _) \u003d\u003d initialsFromShortNaming) {\n        // The suffix is present at the end of the short naming so it\u0027s actually a name\n        // e.g. Minder, EI (Minder, E., I)\n        (None, optGivenNames.map { list \u003d\u003e\n            optPotentialSuffix.toSeq.flatMap { potentialSuffix \u003d\u003e\n                list :+ Seq(potentialSuffix)\n            }\n        })\n    } else if (optPotentialSuffix.isDefined \u0026\u0026 optPotentialSuffix.map(_ + initials) \u003d\u003d initialsFromShortNaming) {\n        // The suffix is present at the beginning of the short naming so it\u0027s actually a name\n        // e.g. Svetlana, VS (Svetlana, Selivanova, V)\n        (None, optGivenNames.map { list \u003d\u003e\n            optPotentialSuffix.toSeq.flatMap { potentialSuffix \u003d\u003e\n                Seq(potentialSuffix) +: list\n            }\n        })\n    } else {\n        (optPotentialSuffix, optGivenNames)\n    }\n}\n\ndef generateAuthorsDF(df: org.apache.spark.sql.DataFrame): org.apache.spark.sql.DataFrame \u003d {\n    df.withColumn(\n        \"is_anonymous\", isAnonymous(\u0027raw)\n    ).withColumn(\n        \"short_naming\", extractShortNaming(\u0027raw)\n    ).withColumn(\n        \"expanded_naming\", extractExpandedNaming(\u0027raw)\n    ).withColumn(\n        \"extracted_names\", extractNames(\u0027expanded_naming)\n    ).withColumn(\n        \"potential_given_names\", extractGivenNames(\u0027extracted_names, \u0027short_naming)\n    ).withColumn(\n        \"last_name\", \u0027short_naming.getField(\"_1\")\n    ).withColumn(\n        \"nickname\", \u0027expanded_naming.getField(\"_2\")\n    ).withColumn(\n        \"maiden_name\", \u0027expanded_naming.getField(\"_3\")\n    ).withColumn(\n        \"potential_suffix\", extractSuffix(\u0027extracted_names, \u0027short_naming)\n    ).withColumn(\n        \"processed_suffix\", processSuffix(\u0027short_naming, \u0027potential_suffix, \u0027potential_given_names)\n    ).withColumn(\n        \"suffix\", \u0027processed_suffix.getField(\"_1\")\n    ).withColumn(\n        \"given_names\", \u0027processed_suffix.getField(\"_2\")\n    ).withColumn(\n        \"affiliations\", extractAffiliations(\u0027raw)\n    ).withColumn(\n        \"is_valid\", \u0027last_name.isNotNull or \u0027is_anonymous\n    )\n}\n\nval authors \u003d generateAuthorsDF(\n    rawPublications.filter(\u0027is_summary \u003d\u003d\u003d false).select(\n        \u0027did, \u0027pub_id, \u0027is_main, \u0027is_backward, \u0027is_forward, \u0027authors_field\n    ).explode(\"authors_field\", \"raw\") { field: String \u003d\u003e\n        Option(field).map(_.replaceFirst(\"\"\"\\.\\.\\.More\\.\\.\\.Less\"\"\", \"\").split(\u0027;\u0027).toSeq.map(_.trim)).getOrElse(Seq.empty)\n    }.filter(\"raw NOT LIKE \u0027et al%\u0027\").select(\u0027did, \u0027pub_id, \u0027raw).rdd.zipWithUniqueId().map {\n        case (r, id) \u003d\u003e (r.getInt(0), r.getLong(1), id, r.getString(2))\n    }.toDF(\"did\", \"pub_id\", \"id\", \"raw\")\n).select(\n    \u0027did, \u0027pub_id, \u0027id, \u0027raw, \u0027is_anonymous, \u0027last_name, \u0027maiden_name, \u0027given_names, \u0027suffix, \u0027nickname, \u0027affiliations, \u0027is_valid\n).persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)\nauthors.registerTempTable(\"authors\")\nauthors.show()",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1434629754103_-825337420",
      "id": "20150618-121554_1370125426",
      "dateCreated": "Jun 18, 2015 12:15:54 PM",
      "dateStarted": "Mar 4, 2016 10:09:57 AM",
      "dateFinished": "Mar 4, 2016 10:10:00 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "OptSaveMode.foreach(authors.write.mode(_).parquet(s\"$ProcessingDir/authors.parquet\"))",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1437033289954_-1432660338",
      "id": "20150716-075449_1392498148",
      "dateCreated": "Jul 16, 2015 7:54:49 AM",
      "dateStarted": "Mar 4, 2016 10:10:00 AM",
      "dateFinished": "Mar 4, 2016 10:10:01 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Author test data",
      "text": "generateAuthorsDF(\n    sc.parallelize(Seq(\n        (\"[Anonymous]\"),\n        (\"Chen, SH (Chen, Shu-Heng)[ 2,4 ]\"),\n        (\"Guerard, JB (Guerard, John B., Jr.)[ 1 ]\"),\n        (\"Wong, C.W.Y.\"),\n        (\"Lin, H.-W.W.\"),\n        (\"Bracken, LJ (Bracken, L. J. (nee Bull))\"),\n        (\"van Koppen, CSA (van Koppen, C. S. A. (Kris))[ 1 ]\"),\n        (\"Cox, J.E. , Jr.\"),\n        (\"Minder, EI (Minder, E., I)\"),\n        (\"Svetlana, VS (Svetlana, Selivanova, V)\"))).toDF(\"raw\")\n).registerTempTable(\"authors_test\")",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorHide": false,
        "tableHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1438848173506_-83710842",
      "id": "20150806-080253_1280547758",
      "dateCreated": "Aug 6, 2015 8:02:53 AM",
      "dateStarted": "Mar 4, 2016 10:10:00 AM",
      "dateFinished": "Mar 4, 2016 10:10:01 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Author test data output",
      "text": "%sql SELECT raw, is_anonymous, last_name, maiden_name, given_names, suffix, nickname, affiliations FROM authors_test",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorHide": false,
        "tableHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "raw",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "is_anonymous",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "raw",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "is_anonymous",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/sql",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1438853765522_2116479818",
      "id": "20150806-093605_399668157",
      "dateCreated": "Aug 6, 2015 9:36:05 AM",
      "dateStarted": "Mar 4, 2016 10:10:01 AM",
      "dateFinished": "Mar 4, 2016 10:10:01 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Given name edge cases",
      "text": "%sql\nSELECT id, raw, name_part\nFROM (\n    SELECT id, raw, name_part, regexp_extract(name_part, \"(\\\\.)\", 1) AS x\n    FROM (\n        SELECT id, raw, name, name_part\n        FROM authors\n        LATERAL VIEW explode(given_names) lv1 AS name\n        LATERAL VIEW explode(name) lv2 AS name_part\n    ) t\n) u\nWHERE x !\u003d \"\"\nORDER BY id",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "tableHide": true,
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "raw",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "raw",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1438785301016_1929745545",
      "id": "20150805-143501_2042849234",
      "dateCreated": "Aug 5, 2015 2:35:01 PM",
      "dateStarted": "Mar 4, 2016 10:10:01 AM",
      "dateFinished": "Mar 4, 2016 10:10:02 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Author validation",
      "text": "%sql SELECT if(is_valid, \"valid\", \"invalid\"), if(is_anonymous, \"anonymous\", \"defined\"), count(*) FROM authors GROUP BY is_valid, is_anonymous",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "_c0",
              "index": 0.0,
              "aggr": "sum"
            },
            {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_c2",
              "index": 2.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "_c0",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428579807728_2059392058",
      "id": "20150409-114327_88153378",
      "dateCreated": "Apr 9, 2015 11:43:27 AM",
      "dateStarted": "Mar 4, 2016 10:10:02 AM",
      "dateFinished": "Mar 4, 2016 10:10:04 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Author affiliation count",
      "text": "%sql SELECT affiliation_count, count(*) FROM (SELECT if(affiliations IS NULL, 0, size(affiliations)) AS affiliation_count FROM authors WHERE is_valid\u003dtrue AND is_anonymous\u003dfalse) t GROUP BY affiliation_count",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "tableHide": true,
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "affiliation_count",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "affiliation_count",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428659979879_1093761210",
      "id": "20150410-095939_47769180",
      "dateCreated": "Apr 10, 2015 9:59:39 AM",
      "dateStarted": "Mar 4, 2016 10:10:02 AM",
      "dateFinished": "Mar 4, 2016 10:10:05 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Authors without affiliation by year",
      "text": "%sql\nSELECT year, count(*)\nFROM authors JOIN publications ON authors.pub_id\u003dpublications.pub_id\nWHERE authors.is_valid\u003dtrue AND authors.is_anonymous\u003dfalse AND publications.is_valid\u003dtrue AND affiliations IS NULL\nGROUP BY year",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "year",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "year",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428667675188_399578133",
      "id": "20150410-120755_734213797",
      "dateCreated": "Apr 10, 2015 12:07:55 PM",
      "dateStarted": "Mar 4, 2016 10:10:04 AM",
      "dateFinished": "Mar 4, 2016 10:10:07 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Author affiliation count from 2008",
      "text": "%sql\nSELECT affiliation_count, count(*)\nFROM (\n    SELECT if(affiliations IS NULL, 0, size(affiliations)) AS affiliation_count\n    FROM authors JOIN publications ON authors.pub_id\u003dpublications.pub_id\n    WHERE authors.is_valid\u003dtrue AND authors.is_anonymous\u003dfalse AND publications.is_valid\u003dtrue AND year \u003e 2007\n) t\nGROUP BY affiliation_count",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "affiliation_count",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "affiliation_count",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428668000133_247878153",
      "id": "20150410-121320_524961471",
      "dateCreated": "Apr 10, 2015 12:13:20 PM",
      "dateStarted": "Mar 4, 2016 10:10:05 AM",
      "dateFinished": "Mar 4, 2016 10:10:09 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Processing: Institutions",
      "text": "val parseAffiliation \u003d {\n    val AddressExtractor \u003d \"\"\"\\[ (\\d+) \\] (.+)\"\"\".r\n    \n    sqlc.udf.register(\"parse_affiliation\", (str: String) \u003d\u003e {\n        Option(str) match {\n            case Some(AddressExtractor(idx, rawAddress)) \u003d\u003e (Some(idx.toShort), Some(rawAddress.trim))\n            case _                                       \u003d\u003e (None, None)\n        }\n    })\n}\n\nval institutions \u003d rawPublications.explode(\"affiliations_field\", \"affiliation\") { affiliations: Seq[Wos.Affiliation] \u003d\u003e\n    Option(affiliations).toSeq.flatten\n}.withColumn(\n    \"parsed_affiliation\", parseAffiliation(\u0027affiliation.getField(\"addressLine\"))\n).select(\n    \u0027did,\n    \u0027pub_id,\n    \u0027parsed_affiliation.getField(\"_1\") as \"idx\",\n    \u0027parsed_affiliation.getField(\"_2\") as \"address\",\n    \u0027affiliation.getField(\"enhancedNames\") as \"enhanced_names\"\n).withColumn(\n    \"is_valid\", \u0027address.isNotNull\n)\n\ninstitutions.registerTempTable(\"institutions\")\ninstitutions.show()",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428421692873_1711805159",
      "id": "20150407-154812_808492516",
      "dateCreated": "Apr 7, 2015 3:48:12 PM",
      "dateStarted": "Mar 4, 2016 10:10:07 AM",
      "dateFinished": "Mar 4, 2016 10:10:09 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Institutions validation",
      "text": "%sql SELECT if(is_valid, \"valid\", \"invalid\"), count(*) FROM institutions GROUP BY is_valid",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "_c0",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "yAxis": {
              "name": "_c1",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428581701123_-1347952195",
      "id": "20150409-121501_1274479161",
      "dateCreated": "Apr 9, 2015 12:15:01 PM",
      "dateStarted": "Mar 4, 2016 10:10:09 AM",
      "dateFinished": "Mar 4, 2016 10:10:11 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "OptSaveMode.foreach(institutions.write.mode(_).parquet(s\"$ProcessingDir/institutions.parquet\"))",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1442479081019_1036825068",
      "id": "20150917-083801_1335894436",
      "dateCreated": "Sep 17, 2015 8:38:01 AM",
      "dateStarted": "Mar 4, 2016 10:10:09 AM",
      "dateFinished": "Mar 4, 2016 10:10:11 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Mar 4, 2016 5:32:25 PM",
      "config": {
        "colWidth": 12.0,
        "editorHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1428678023528_7071764",
      "id": "20150410-150023_497546737",
      "dateCreated": "Apr 10, 2015 3:00:23 PM",
      "dateStarted": "Mar 4, 2016 10:10:11 AM",
      "dateFinished": "Mar 4, 2016 10:10:11 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "[13] Data processing",
  "id": "2B2X4HFBD",
  "angularObjects": {
    "2BD4H88Z1": [],
    "2BD1QADH4": [],
    "2BDHDMZPH": [],
    "2BCNPYMPW": [],
    "2BDRR3C3C": [],
    "2BBM98Y57": [],
    "2BECY547T": [],
    "2BB8PV5AF": [],
    "2BBS2SY48": [],
    "2BE8YHRPM": [],
    "2BDEEJDMM": [],
    "2BDJU4DCB": [],
    "2BF2YVJQX": [],
    "2BCHBM7Y2": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}